generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique @db.VarChar(255)
  password      String          @db.VarChar(255)
  name          String          @db.VarChar(100)
  role          Role            @default(MEMBER)
  isActive      Boolean         @default(true) @map("is_active")
  tasks         Task[]
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  Project       Project[]
  ProjectMember ProjectMember[]

  @@index([email])
  @@map("users")
}

enum Role {
  ADMIN
  MEMBER
}

model Project {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(150)
  owner         User            @relation(fields: [ownerId], references: [id])
  ownerId       Int             @map("owner_id")
  tasks         Task[]
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  ProjectMember ProjectMember[]

  @@map("projects")
}

model ProjectMember {
  id        Int          @id @default(autoincrement())
  project   Project      @relation(fields: [projectId], references: [id])
  projectId Int
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  status    InviteStatus @default(PENDING)
  role      Role         @default(MEMBER)
  joinedAt  DateTime     @default(now())

  @@unique([projectId, userId])
  @@map("project_members")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String     @db.VarChar(200)
  description String
  status      TaskStatus @default(PENDING)
  assignedTo  User?      @relation(fields: [userId], references: [id])
  userId      Int?
  project     Project?   @relation(fields: [projectId], references: [id])
  projectId   Int?       @map("project_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  @@index([userId, status])
  @@map("tasks")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// TODO: deprecate table and switch to Token table
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String
  userId    Int      @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}
